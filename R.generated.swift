//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.file` struct is generated, and contains static references to 2 files.
  struct file {
    /// Resource file `EFOpenController.json`.
    static let efOpenControllerJson = Rswift.FileResource(bundle: R.hostingBundle, name: "EFOpenController", pathExtension: "json")
    /// Resource file `MJPhotoBrowser.bundle`.
    static let mjPhotoBrowserBundle = Rswift.FileResource(bundle: R.hostingBundle, name: "MJPhotoBrowser", pathExtension: "bundle")
    
    /// `bundle.url(forResource: "EFOpenController", withExtension: "json")`
    static func efOpenControllerJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.efOpenControllerJson
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "MJPhotoBrowser", withExtension: "bundle")`
    static func mjPhotoBrowserBundle(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.mjPhotoBrowserBundle
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 23 images.
  struct image {
    /// Image `Launch`.
    static let launch = Rswift.ImageResource(bundle: R.hostingBundle, name: "Launch")
    /// Image `icon`.
    static let icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon")
    /// Image `logo`.
    static let logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo")
    /// Image `placeholder_default`.
    static let placeholder_default = Rswift.ImageResource(bundle: R.hostingBundle, name: "placeholder_default")
    /// Image `placeholder_transparent`.
    static let placeholder_transparent = Rswift.ImageResource(bundle: R.hostingBundle, name: "placeholder_transparent")
    /// Image `placeholder_user`.
    static let placeholder_user = Rswift.ImageResource(bundle: R.hostingBundle, name: "placeholder_user")
    /// Image `welcome_1`.
    static let welcome_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "welcome_1")
    /// Image `welcome_2`.
    static let welcome_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "welcome_2")
    /// Image `welcome_3`.
    static let welcome_3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "welcome_3")
    /// Image `图标_ISO`.
    static let 图标_ISO = Rswift.ImageResource(bundle: R.hostingBundle, name: "图标_ISO")
    /// Image `图标_光圈`.
    static let 图标_光圈 = Rswift.ImageResource(bundle: R.hostingBundle, name: "图标_光圈")
    /// Image `图标_小人`.
    static let 图标_小人 = Rswift.ImageResource(bundle: R.hostingBundle, name: "图标_小人")
    /// Image `图标_小笔`.
    static let 图标_小笔 = Rswift.ImageResource(bundle: R.hostingBundle, name: "图标_小笔")
    /// Image `图标_选择_否`.
    static let 图标_选择_否 = Rswift.ImageResource(bundle: R.hostingBundle, name: "图标_选择_否")
    /// Image `图标_选择_是`.
    static let 图标_选择_是 = Rswift.ImageResource(bundle: R.hostingBundle, name: "图标_选择_是")
    /// Image `按钮_关闭`.
    static let 按钮_关闭 = Rswift.ImageResource(bundle: R.hostingBundle, name: "按钮_关闭")
    /// Image `按钮_新建`.
    static let 按钮_新建 = Rswift.ImageResource(bundle: R.hostingBundle, name: "按钮_新建")
    /// Image `按钮_更多_白`.
    static let 按钮_更多_白 = Rswift.ImageResource(bundle: R.hostingBundle, name: "按钮_更多_白")
    /// Image `按钮_更多_黑`.
    static let 按钮_更多_黑 = Rswift.ImageResource(bundle: R.hostingBundle, name: "按钮_更多_黑")
    /// Image `按钮_设置_白`.
    static let 按钮_设置_白 = Rswift.ImageResource(bundle: R.hostingBundle, name: "按钮_设置_白")
    /// Image `按钮_设置_黑`.
    static let 按钮_设置_黑 = Rswift.ImageResource(bundle: R.hostingBundle, name: "按钮_设置_黑")
    /// Image `按钮_返回_白`.
    static let 按钮_返回_白 = Rswift.ImageResource(bundle: R.hostingBundle, name: "按钮_返回_白")
    /// Image `按钮_返回_黑`.
    static let 按钮_返回_黑 = Rswift.ImageResource(bundle: R.hostingBundle, name: "按钮_返回_黑")
    
    /// `UIImage(named: "Launch", bundle: ..., traitCollection: ...)`
    static func launch(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.launch, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon", bundle: ..., traitCollection: ...)`
    static func icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "logo", bundle: ..., traitCollection: ...)`
    static func logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "placeholder_default", bundle: ..., traitCollection: ...)`
    static func placeholder_default(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.placeholder_default, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "placeholder_transparent", bundle: ..., traitCollection: ...)`
    static func placeholder_transparent(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.placeholder_transparent, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "placeholder_user", bundle: ..., traitCollection: ...)`
    static func placeholder_user(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.placeholder_user, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "welcome_1", bundle: ..., traitCollection: ...)`
    static func welcome_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.welcome_1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "welcome_2", bundle: ..., traitCollection: ...)`
    static func welcome_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.welcome_2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "welcome_3", bundle: ..., traitCollection: ...)`
    static func welcome_3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.welcome_3, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "图标_ISO", bundle: ..., traitCollection: ...)`
    static func 图标_ISO(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.图标_ISO, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "图标_光圈", bundle: ..., traitCollection: ...)`
    static func 图标_光圈(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.图标_光圈, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "图标_小人", bundle: ..., traitCollection: ...)`
    static func 图标_小人(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.图标_小人, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "图标_小笔", bundle: ..., traitCollection: ...)`
    static func 图标_小笔(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.图标_小笔, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "图标_选择_否", bundle: ..., traitCollection: ...)`
    static func 图标_选择_否(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.图标_选择_否, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "图标_选择_是", bundle: ..., traitCollection: ...)`
    static func 图标_选择_是(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.图标_选择_是, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "按钮_关闭", bundle: ..., traitCollection: ...)`
    static func 按钮_关闭(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.按钮_关闭, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "按钮_新建", bundle: ..., traitCollection: ...)`
    static func 按钮_新建(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.按钮_新建, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "按钮_更多_白", bundle: ..., traitCollection: ...)`
    static func 按钮_更多_白(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.按钮_更多_白, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "按钮_更多_黑", bundle: ..., traitCollection: ...)`
    static func 按钮_更多_黑(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.按钮_更多_黑, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "按钮_设置_白", bundle: ..., traitCollection: ...)`
    static func 按钮_设置_白(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.按钮_设置_白, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "按钮_设置_黑", bundle: ..., traitCollection: ...)`
    static func 按钮_设置_黑(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.按钮_设置_黑, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "按钮_返回_白", bundle: ..., traitCollection: ...)`
    static func 按钮_返回_白(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.按钮_返回_白, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "按钮_返回_黑", bundle: ..., traitCollection: ...)`
    static func 按钮_返回_黑(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.按钮_返回_黑, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 3 localization tables.
  struct string {
    /// This `R.string.launchScreen` struct is generated, and contains static references to 0 localization keys.
    struct launchScreen {
      fileprivate init() {}
    }
    
    /// This `R.string.localizable` struct is generated, and contains static references to 76 localization keys.
    struct localizable {
      /// zh-Hans translation:       同意
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static let 同意 = Rswift.StringResource(key: "      同意", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "zh-Hant", "en"], comment: nil)
      /// zh-Hans translation: 　尚未注册？
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static let 尚未注册 = Rswift.StringResource(key: "　尚未注册？", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "zh-Hant", "en"], comment: nil)
      /// zh-Hans translation: 　已有账号？
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static let 已有账号 = Rswift.StringResource(key: "　已有账号？", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "zh-Hant", "en"], comment: nil)
      /// zh-Hans translation: 上传失败
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static let 上传失败 = Rswift.StringResource(key: "上传失败", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "zh-Hant", "en"], comment: nil)
      /// zh-Hans translation: 个人博客 or 个人网站
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static let 个人博客Or个人网站 = Rswift.StringResource(key: "个人博客 or 个人网站", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "zh-Hant", "en"], comment: nil)
      /// zh-Hans translation: 中英日数字_
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static let 中英日数字_ = Rswift.StringResource(key: "中英日数字_", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "zh-Hant", "en"], comment: nil)
      /// zh-Hans translation: 举报
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static let 举报 = Rswift.StringResource(key: "举报", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "zh-Hant", "en"], comment: nil)
      /// zh-Hans translation: 保存到相册
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static let 保存到相册 = Rswift.StringResource(key: "保存到相册", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "zh-Hant", "en"], comment: nil)
      /// zh-Hans translation: 保存失败
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static let 保存失败 = Rswift.StringResource(key: "保存失败", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "zh-Hant", "en"], comment: nil)
      /// zh-Hans translation: 关于 VSCAM
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static let 关于VSCAM = Rswift.StringResource(key: "关于 VSCAM", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "zh-Hant", "en"], comment: nil)
      /// zh-Hans translation: 关于我的一句话自我介绍
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static let 关于我的一句话自我介绍 = Rswift.StringResource(key: "关于我的一句话自我介绍", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "zh-Hant", "en"], comment: nil)
      /// zh-Hans translation: 分享
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static let 分享 = Rswift.StringResource(key: "分享", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "zh-Hant", "en"], comment: nil)
      /// zh-Hans translation: 删除
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static let 删除 = Rswift.StringResource(key: "删除", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "zh-Hant", "en"], comment: nil)
      /// zh-Hans translation: 删除头像
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static let 删除头像 = Rswift.StringResource(key: "删除头像", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "zh-Hant", "en"], comment: nil)
      /// zh-Hans translation: 删除头像失败
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static let 删除头像失败 = Rswift.StringResource(key: "删除头像失败", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "zh-Hant", "en"], comment: nil)
      /// zh-Hans translation: 删除头像成功
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static let 删除头像成功 = Rswift.StringResource(key: "删除头像成功", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "zh-Hant", "en"], comment: nil)
      /// zh-Hans translation: 剪贴板内容无法识别
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static let 剪贴板内容无法识别 = Rswift.StringResource(key: "剪贴板内容无法识别", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "zh-Hant", "en"], comment: nil)
      /// zh-Hans translation: 剪贴板没有内容
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static let 剪贴板没有内容 = Rswift.StringResource(key: "剪贴板没有内容", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "zh-Hant", "en"], comment: nil)
      /// zh-Hans translation: 加入
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static let 加入 = Rswift.StringResource(key: "加入", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "zh-Hant", "en"], comment: nil)
      /// zh-Hans translation: 去评分
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static let 去评分 = Rswift.StringResource(key: "去评分", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "zh-Hant", "en"], comment: nil)
      /// zh-Hans translation: 发布失败
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static let 发布失败 = Rswift.StringResource(key: "发布失败", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "zh-Hant", "en"], comment: nil)
      /// zh-Hans translation: 取消
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static let 取消 = Rswift.StringResource(key: "取消", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "zh-Hant", "en"], comment: nil)
      /// zh-Hans translation: 图片举报失败
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static let 图片举报失败 = Rswift.StringResource(key: "图片举报失败", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "zh-Hant", "en"], comment: nil)
      /// zh-Hans translation: 图片举报成功，感谢您的反馈！您将不会在列表中再次看到该图片，我们将会尽快对您的举报信息进行核实与处理，您将在 24 小时内收到我们的反馈邮件。
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static let 图片举报成功感谢您的反馈您将不会在列表中再次看到该图片我们将会尽快对您的举报信息进行核实与处理您将在24小时内收到我们的反馈邮件 = Rswift.StringResource(key: "图片举报成功，感谢您的反馈！您将不会在列表中再次看到该图片，我们将会尽快对您的举报信息进行核实与处理，您将在 24 小时内收到我们的反馈邮件。", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "zh-Hant", "en"], comment: nil)
      /// zh-Hans translation: 图片列表刷新失败
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static let 图片列表刷新失败 = Rswift.StringResource(key: "图片列表刷新失败", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "zh-Hant", "en"], comment: nil)
      /// zh-Hans translation: 图片列表加载失败
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static let 图片列表加载失败 = Rswift.StringResource(key: "图片列表加载失败", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "zh-Hant", "en"], comment: nil)
      /// zh-Hans translation: 图片删除失败
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static let 图片删除失败 = Rswift.StringResource(key: "图片删除失败", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "zh-Hant", "en"], comment: nil)
      /// zh-Hans translation: 图片描述不能为空
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static let 图片描述不能为空 = Rswift.StringResource(key: "图片描述不能为空", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "zh-Hant", "en"], comment: nil)
      /// zh-Hans translation: 图片正在上传
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static let 图片正在上传 = Rswift.StringResource(key: "图片正在上传", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "zh-Hant", "en"], comment: nil)
      /// zh-Hans translation: 图片编码失败
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static let 图片编码失败 = Rswift.StringResource(key: "图片编码失败", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "zh-Hant", "en"], comment: nil)
      /// zh-Hans translation: 图片获取无效
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static let 图片获取无效 = Rswift.StringResource(key: "图片获取无效", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "zh-Hant", "en"], comment: nil)
      /// zh-Hans translation: 图片详情页打开失败
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static let 图片详情页打开失败 = Rswift.StringResource(key: "图片详情页打开失败", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "zh-Hant", "en"], comment: nil)
      /// zh-Hans translation: 密码不能为空
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static let 密码不能为空 = Rswift.StringResource(key: "密码不能为空", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "zh-Hant", "en"], comment: nil)
      /// zh-Hans translation: 年
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static let 年 = Rswift.StringResource(key: "年", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "zh-Hant", "en"], comment: nil)
      /// zh-Hans translation: 成功保存到相册
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static let 成功保存到相册 = Rswift.StringResource(key: "成功保存到相册", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "zh-Hant", "en"], comment: nil)
      /// zh-Hans translation: 所选图片无效
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static let 所选图片无效 = Rswift.StringResource(key: "所选图片无效", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "zh-Hant", "en"], comment: nil)
      /// zh-Hans translation: 手机拍摄、胶片味、意识流
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static let 手机拍摄胶片味意识流 = Rswift.StringResource(key: "手机拍摄、胶片味、意识流", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "zh-Hant", "en"], comment: nil)
      /// zh-Hans translation: 描述信息
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static let 描述信息 = Rswift.StringResource(key: "描述信息", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "zh-Hant", "en"], comment: nil)
      /// zh-Hans translation: 提示
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static let 提示 = Rswift.StringResource(key: "提示", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "zh-Hant", "en"], comment: nil)
      /// zh-Hans translation: 操作失败
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static let 操作失败 = Rswift.StringResource(key: "操作失败", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "zh-Hant", "en"], comment: nil)
      /// zh-Hans translation: 数据异常
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static let 数据异常 = Rswift.StringResource(key: "数据异常", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "zh-Hant", "en"], comment: nil)
      /// zh-Hans translation: 数据格式错误
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static let 数据格式错误 = Rswift.StringResource(key: "数据格式错误", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "zh-Hant", "en"], comment: nil)
      /// zh-Hans translation: 日
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static let 日 = Rswift.StringResource(key: "日", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "zh-Hant", "en"], comment: nil)
      /// zh-Hans translation: 昵称不能为空
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static let 昵称不能为空 = Rswift.StringResource(key: "昵称不能为空", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "zh-Hant", "en"], comment: nil)
      /// zh-Hans translation: 更换
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static let 更换 = Rswift.StringResource(key: "更换", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "zh-Hant", "en"], comment: nil)
      /// zh-Hans translation: 更改个人信息成功
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static let 更改个人信息成功 = Rswift.StringResource(key: "更改个人信息成功", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "zh-Hant", "en"], comment: nil)
      /// zh-Hans translation: 更改失败
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static let 更改失败 = Rswift.StringResource(key: "更改失败", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "zh-Hant", "en"], comment: nil)
      /// zh-Hans translation: 更改头像失败
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static let 更改头像失败 = Rswift.StringResource(key: "更改头像失败", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "zh-Hant", "en"], comment: nil)
      /// zh-Hans translation: 更改头像成功
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static let 更改头像成功 = Rswift.StringResource(key: "更改头像成功", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "zh-Hant", "en"], comment: nil)
      /// zh-Hans translation: 月
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static let 月 = Rswift.StringResource(key: "月", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "zh-Hant", "en"], comment: nil)
      /// zh-Hans translation: 未知版本
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static let 未知版本 = Rswift.StringResource(key: "未知版本", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "zh-Hant", "en"], comment: nil)
      /// zh-Hans translation: 欢迎页面
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static let 欢迎页面 = Rswift.StringResource(key: "欢迎页面", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "zh-Hant", "en"], comment: nil)
      /// zh-Hans translation: 注册失败
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static let 注册失败 = Rswift.StringResource(key: "注册失败", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "zh-Hant", "en"], comment: nil)
      /// zh-Hans translation: 清理缓存
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static let 清理缓存 = Rswift.StringResource(key: "清理缓存", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "zh-Hant", "en"], comment: nil)
      /// zh-Hans translation: 用户协议
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static let 用户协议 = Rswift.StringResource(key: "用户协议", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "zh-Hant", "en"], comment: nil)
      /// zh-Hans translation: 用户名不能为空
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static let 用户名不能为空 = Rswift.StringResource(key: "用户名不能为空", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "zh-Hant", "en"], comment: nil)
      /// zh-Hans translation: 用户详情页打开失败
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static let 用户详情页打开失败 = Rswift.StringResource(key: "用户详情页打开失败", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "zh-Hant", "en"], comment: nil)
      /// zh-Hans translation: 登录
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static let 登录 = Rswift.StringResource(key: "登录", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "zh-Hant", "en"], comment: nil)
      /// zh-Hans translation: 登录失败
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static let 登录失败 = Rswift.StringResource(key: "登录失败", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "zh-Hant", "en"], comment: nil)
      /// zh-Hans translation: 确定
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static let 确定 = Rswift.StringResource(key: "确定", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "zh-Hant", "en"], comment: nil)
      /// zh-Hans translation: 确认更改
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static let 确认更改 = Rswift.StringResource(key: "确认更改", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "zh-Hant", "en"], comment: nil)
      /// zh-Hans translation: 缓存大小为
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static let 缓存大小为 = Rswift.StringResource(key: "缓存大小为", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "zh-Hant", "en"], comment: nil)
      /// zh-Hans translation: 网络不给力，图片下载失败
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static let 网络不给力图片下载失败 = Rswift.StringResource(key: "网络不给力，图片下载失败", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "zh-Hant", "en"], comment: nil)
      /// zh-Hans translation: 获取图片失败
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static let 获取图片失败 = Rswift.StringResource(key: "获取图片失败", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "zh-Hant", "en"], comment: nil)
      /// zh-Hans translation: 请先登录
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static let 请先登录 = Rswift.StringResource(key: "请先登录", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "zh-Hant", "en"], comment: nil)
      /// zh-Hans translation: 请填写您的举报描述信息以方便我们的查证与处理
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static let 请填写您的举报描述信息以方便我们的查证与处理 = Rswift.StringResource(key: "请填写您的举报描述信息以方便我们的查证与处理", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "zh-Hant", "en"], comment: nil)
      /// zh-Hans translation: 请查看并同意用户协议
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static let 请查看并同意用户协议 = Rswift.StringResource(key: "请查看并同意用户协议", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "zh-Hant", "en"], comment: nil)
      /// zh-Hans translation: 请求失败
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static let 请求失败 = Rswift.StringResource(key: "请求失败", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "zh-Hant", "en"], comment: nil)
      /// zh-Hans translation: 请选择使用 iPhone 拍摄的照片或其它经过处理的图片
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static let 请选择使用IPhone拍摄的照片或其它经过处理的图片 = Rswift.StringResource(key: "请选择使用 iPhone 拍摄的照片或其它经过处理的图片", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "zh-Hant", "en"], comment: nil)
      /// zh-Hans translation: 输入一句话照片简介
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static let 输入一句话照片简介 = Rswift.StringResource(key: "输入一句话照片简介", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "zh-Hant", "en"], comment: nil)
      /// zh-Hans translation: 退出登录
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static let 退出登录 = Rswift.StringResource(key: "退出登录", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "zh-Hant", "en"], comment: nil)
      /// zh-Hans translation: 退出登录失败
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static let 退出登录失败 = Rswift.StringResource(key: "退出登录失败", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "zh-Hant", "en"], comment: nil)
      /// zh-Hans translation: 邮箱不能为空
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static let 邮箱不能为空 = Rswift.StringResource(key: "邮箱不能为空", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "zh-Hant", "en"], comment: nil)
      /// zh-Hans translation: 邮箱格式错误
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static let 邮箱格式错误 = Rswift.StringResource(key: "邮箱格式错误", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "zh-Hant", "en"], comment: nil)
      /// zh-Hans translation: 隐私政策
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static let 隐私政策 = Rswift.StringResource(key: "隐私政策", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "zh-Hant", "en"], comment: nil)
      /// zh-Hans translation: ，确定要清理缓存么？
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static let 确定要清理缓存么 = Rswift.StringResource(key: "，确定要清理缓存么？", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "zh-Hant", "en"], comment: nil)
      
      /// zh-Hans translation:       同意
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static func 同意(_: Void = ()) -> String {
        return NSLocalizedString("      同意", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 　尚未注册？
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static func 尚未注册(_: Void = ()) -> String {
        return NSLocalizedString("　尚未注册？", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 　已有账号？
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static func 已有账号(_: Void = ()) -> String {
        return NSLocalizedString("　已有账号？", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 上传失败
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static func 上传失败(_: Void = ()) -> String {
        return NSLocalizedString("上传失败", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 个人博客 or 个人网站
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static func 个人博客Or个人网站(_: Void = ()) -> String {
        return NSLocalizedString("个人博客 or 个人网站", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 中英日数字_
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static func 中英日数字_(_: Void = ()) -> String {
        return NSLocalizedString("中英日数字_", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 举报
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static func 举报(_: Void = ()) -> String {
        return NSLocalizedString("举报", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 保存到相册
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static func 保存到相册(_: Void = ()) -> String {
        return NSLocalizedString("保存到相册", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 保存失败
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static func 保存失败(_: Void = ()) -> String {
        return NSLocalizedString("保存失败", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 关于 VSCAM
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static func 关于VSCAM(_: Void = ()) -> String {
        return NSLocalizedString("关于 VSCAM", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 关于我的一句话自我介绍
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static func 关于我的一句话自我介绍(_: Void = ()) -> String {
        return NSLocalizedString("关于我的一句话自我介绍", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 分享
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static func 分享(_: Void = ()) -> String {
        return NSLocalizedString("分享", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 删除
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static func 删除(_: Void = ()) -> String {
        return NSLocalizedString("删除", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 删除头像
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static func 删除头像(_: Void = ()) -> String {
        return NSLocalizedString("删除头像", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 删除头像失败
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static func 删除头像失败(_: Void = ()) -> String {
        return NSLocalizedString("删除头像失败", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 删除头像成功
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static func 删除头像成功(_: Void = ()) -> String {
        return NSLocalizedString("删除头像成功", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 剪贴板内容无法识别
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static func 剪贴板内容无法识别(_: Void = ()) -> String {
        return NSLocalizedString("剪贴板内容无法识别", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 剪贴板没有内容
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static func 剪贴板没有内容(_: Void = ()) -> String {
        return NSLocalizedString("剪贴板没有内容", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 加入
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static func 加入(_: Void = ()) -> String {
        return NSLocalizedString("加入", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 去评分
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static func 去评分(_: Void = ()) -> String {
        return NSLocalizedString("去评分", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 发布失败
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static func 发布失败(_: Void = ()) -> String {
        return NSLocalizedString("发布失败", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 取消
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static func 取消(_: Void = ()) -> String {
        return NSLocalizedString("取消", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 图片举报失败
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static func 图片举报失败(_: Void = ()) -> String {
        return NSLocalizedString("图片举报失败", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 图片举报成功，感谢您的反馈！您将不会在列表中再次看到该图片，我们将会尽快对您的举报信息进行核实与处理，您将在 24 小时内收到我们的反馈邮件。
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static func 图片举报成功感谢您的反馈您将不会在列表中再次看到该图片我们将会尽快对您的举报信息进行核实与处理您将在24小时内收到我们的反馈邮件(_: Void = ()) -> String {
        return NSLocalizedString("图片举报成功，感谢您的反馈！您将不会在列表中再次看到该图片，我们将会尽快对您的举报信息进行核实与处理，您将在 24 小时内收到我们的反馈邮件。", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 图片列表刷新失败
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static func 图片列表刷新失败(_: Void = ()) -> String {
        return NSLocalizedString("图片列表刷新失败", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 图片列表加载失败
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static func 图片列表加载失败(_: Void = ()) -> String {
        return NSLocalizedString("图片列表加载失败", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 图片删除失败
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static func 图片删除失败(_: Void = ()) -> String {
        return NSLocalizedString("图片删除失败", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 图片描述不能为空
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static func 图片描述不能为空(_: Void = ()) -> String {
        return NSLocalizedString("图片描述不能为空", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 图片正在上传
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static func 图片正在上传(_: Void = ()) -> String {
        return NSLocalizedString("图片正在上传", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 图片编码失败
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static func 图片编码失败(_: Void = ()) -> String {
        return NSLocalizedString("图片编码失败", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 图片获取无效
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static func 图片获取无效(_: Void = ()) -> String {
        return NSLocalizedString("图片获取无效", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 图片详情页打开失败
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static func 图片详情页打开失败(_: Void = ()) -> String {
        return NSLocalizedString("图片详情页打开失败", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 密码不能为空
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static func 密码不能为空(_: Void = ()) -> String {
        return NSLocalizedString("密码不能为空", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 年
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static func 年(_: Void = ()) -> String {
        return NSLocalizedString("年", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 成功保存到相册
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static func 成功保存到相册(_: Void = ()) -> String {
        return NSLocalizedString("成功保存到相册", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 所选图片无效
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static func 所选图片无效(_: Void = ()) -> String {
        return NSLocalizedString("所选图片无效", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 手机拍摄、胶片味、意识流
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static func 手机拍摄胶片味意识流(_: Void = ()) -> String {
        return NSLocalizedString("手机拍摄、胶片味、意识流", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 描述信息
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static func 描述信息(_: Void = ()) -> String {
        return NSLocalizedString("描述信息", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 提示
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static func 提示(_: Void = ()) -> String {
        return NSLocalizedString("提示", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 操作失败
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static func 操作失败(_: Void = ()) -> String {
        return NSLocalizedString("操作失败", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 数据异常
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static func 数据异常(_: Void = ()) -> String {
        return NSLocalizedString("数据异常", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 数据格式错误
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static func 数据格式错误(_: Void = ()) -> String {
        return NSLocalizedString("数据格式错误", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 日
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static func 日(_: Void = ()) -> String {
        return NSLocalizedString("日", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 昵称不能为空
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static func 昵称不能为空(_: Void = ()) -> String {
        return NSLocalizedString("昵称不能为空", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 更换
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static func 更换(_: Void = ()) -> String {
        return NSLocalizedString("更换", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 更改个人信息成功
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static func 更改个人信息成功(_: Void = ()) -> String {
        return NSLocalizedString("更改个人信息成功", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 更改失败
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static func 更改失败(_: Void = ()) -> String {
        return NSLocalizedString("更改失败", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 更改头像失败
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static func 更改头像失败(_: Void = ()) -> String {
        return NSLocalizedString("更改头像失败", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 更改头像成功
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static func 更改头像成功(_: Void = ()) -> String {
        return NSLocalizedString("更改头像成功", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 月
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static func 月(_: Void = ()) -> String {
        return NSLocalizedString("月", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 未知版本
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static func 未知版本(_: Void = ()) -> String {
        return NSLocalizedString("未知版本", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 欢迎页面
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static func 欢迎页面(_: Void = ()) -> String {
        return NSLocalizedString("欢迎页面", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 注册失败
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static func 注册失败(_: Void = ()) -> String {
        return NSLocalizedString("注册失败", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 清理缓存
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static func 清理缓存(_: Void = ()) -> String {
        return NSLocalizedString("清理缓存", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 用户协议
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static func 用户协议(_: Void = ()) -> String {
        return NSLocalizedString("用户协议", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 用户名不能为空
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static func 用户名不能为空(_: Void = ()) -> String {
        return NSLocalizedString("用户名不能为空", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 用户详情页打开失败
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static func 用户详情页打开失败(_: Void = ()) -> String {
        return NSLocalizedString("用户详情页打开失败", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 登录
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static func 登录(_: Void = ()) -> String {
        return NSLocalizedString("登录", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 登录失败
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static func 登录失败(_: Void = ()) -> String {
        return NSLocalizedString("登录失败", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 确定
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static func 确定(_: Void = ()) -> String {
        return NSLocalizedString("确定", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 确认更改
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static func 确认更改(_: Void = ()) -> String {
        return NSLocalizedString("确认更改", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 缓存大小为
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static func 缓存大小为(_: Void = ()) -> String {
        return NSLocalizedString("缓存大小为", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 网络不给力，图片下载失败
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static func 网络不给力图片下载失败(_: Void = ()) -> String {
        return NSLocalizedString("网络不给力，图片下载失败", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 获取图片失败
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static func 获取图片失败(_: Void = ()) -> String {
        return NSLocalizedString("获取图片失败", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 请先登录
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static func 请先登录(_: Void = ()) -> String {
        return NSLocalizedString("请先登录", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 请填写您的举报描述信息以方便我们的查证与处理
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static func 请填写您的举报描述信息以方便我们的查证与处理(_: Void = ()) -> String {
        return NSLocalizedString("请填写您的举报描述信息以方便我们的查证与处理", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 请查看并同意用户协议
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static func 请查看并同意用户协议(_: Void = ()) -> String {
        return NSLocalizedString("请查看并同意用户协议", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 请求失败
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static func 请求失败(_: Void = ()) -> String {
        return NSLocalizedString("请求失败", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 请选择使用 iPhone 拍摄的照片或其它经过处理的图片
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static func 请选择使用IPhone拍摄的照片或其它经过处理的图片(_: Void = ()) -> String {
        return NSLocalizedString("请选择使用 iPhone 拍摄的照片或其它经过处理的图片", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 输入一句话照片简介
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static func 输入一句话照片简介(_: Void = ()) -> String {
        return NSLocalizedString("输入一句话照片简介", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 退出登录
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static func 退出登录(_: Void = ()) -> String {
        return NSLocalizedString("退出登录", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 退出登录失败
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static func 退出登录失败(_: Void = ()) -> String {
        return NSLocalizedString("退出登录失败", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 邮箱不能为空
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static func 邮箱不能为空(_: Void = ()) -> String {
        return NSLocalizedString("邮箱不能为空", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 邮箱格式错误
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static func 邮箱格式错误(_: Void = ()) -> String {
        return NSLocalizedString("邮箱格式错误", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 隐私政策
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static func 隐私政策(_: Void = ()) -> String {
        return NSLocalizedString("隐私政策", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: ，确定要清理缓存么？
      /// 
      /// Locales: zh-Hans, zh-Hant, en
      static func 确定要清理缓存么(_: Void = ()) -> String {
        return NSLocalizedString("，确定要清理缓存么？", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.main` struct is generated, and contains static references to 0 localization keys.
    struct main {
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try launchScreen.validate()
      try main.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIKit.UIImage(named: "Launch", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Launch' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = MainNavigationController
      
      let bundle = R.hostingBundle
      let name = "Main"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
